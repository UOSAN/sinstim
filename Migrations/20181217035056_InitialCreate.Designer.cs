// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SinStim.Models;

namespace SinStim.Migrations
{
    [DbContext(typeof(SinStimContext))]
    [Migration("20181217035056_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity("SinStim.Models.Eligibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Alcohol");

                    b.Property<bool?>("Chocolate");

                    b.Property<bool?>("Cocaine");

                    b.Property<bool?>("Cookies");

                    b.Property<bool?>("Donuts");

                    b.Property<bool?>("Fries");

                    b.Property<bool?>("Heroin");

                    b.Property<bool?>("IceCream");

                    b.Property<bool?>("Marijuana");

                    b.Property<bool?>("Methamphetamine");

                    b.Property<bool?>("Neutral");

                    b.Property<bool?>("Pasta");

                    b.Property<bool?>("Pills");

                    b.Property<bool?>("Pizza");

                    b.Property<bool?>("Tobacco");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Eligibilities");
                });

            modelBuilder.Entity("SinStim.Models.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("FileName");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("SinStim.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Desirability");

                    b.Property<Guid>("PictureId");

                    b.Property<int?>("Recognizability");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("SinStim.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssignedCategory");

                    b.Property<bool>("IsRejected");

                    b.Property<DateTimeOffset?>("SurveyEndTime");

                    b.Property<DateTimeOffset?>("SurveyStartTime");

                    b.Property<DateTimeOffset?>("TaskEndTime");

                    b.Property<DateTimeOffset?>("TaskStartTime");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SinStim.Models.Eligibility", b =>
                {
                    b.HasOne("SinStim.Models.User", "User")
                        .WithMany("Eligibilities")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SinStim.Models.Rating", b =>
                {
                    b.HasOne("SinStim.Models.Picture", "Picture")
                        .WithMany("Ratings")
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SinStim.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
